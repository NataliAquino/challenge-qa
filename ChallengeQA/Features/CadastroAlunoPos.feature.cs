// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ChallengeQA.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "pos-graduacao")]
    public partial class CadastroPosFeature : object, Xunit.IClassFixture<CadastroPosFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "pos-graduacao"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "CadastroPos", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CadastroAlunoPos.feature"
#line hidden
        
        public CadastroPosFeature(CadastroPosFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Realizar cadastro de aluno de pos graduação com dados validos")]
        [Xunit.TraitAttribute("FeatureTitle", "CadastroPos")]
        [Xunit.TraitAttribute("Description", "Realizar cadastro de aluno de pos graduação com dados validos")]
        [Xunit.InlineDataAttribute("Pós-graduação", "Mestrado em Inteligência Artificial", "51291573038", "JOSE", "SILVA", "14122020", "teste@teste.com", "11991111134", "06020194", "AV MANUEL PEDRO", "CONTINENTAL", "OSASCO", "SAO PAULO", "BRASIL", new string[0])]
        public async global::System.Threading.Tasks.Task RealizarCadastroDeAlunoDePosGraduacaoComDadosValidos(string nivel, string graduation_Combo, string cpf_Input, string name_Input, string surname_Input, string birthdate_Input, string email_Input, string cellphone_Input, string cep_Input, string address_Input, string neighborhood_Input, string city_Input, string state_Input, string country_Input, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("nivel", nivel);
            argumentsOfScenario.Add("graduation-combo", graduation_Combo);
            argumentsOfScenario.Add("cpf-input", cpf_Input);
            argumentsOfScenario.Add("name-input", name_Input);
            argumentsOfScenario.Add("surname-input", surname_Input);
            argumentsOfScenario.Add("birthdate-input", birthdate_Input);
            argumentsOfScenario.Add("email-input", email_Input);
            argumentsOfScenario.Add("cellphone-input", cellphone_Input);
            argumentsOfScenario.Add("cep-input", cep_Input);
            argumentsOfScenario.Add("address-input", address_Input);
            argumentsOfScenario.Add("neighborhood-input", neighborhood_Input);
            argumentsOfScenario.Add("city-input", city_Input);
            argumentsOfScenario.Add("state-input", state_Input);
            argumentsOfScenario.Add("country-input", country_Input);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Realizar cadastro de aluno de pos graduação com dados validos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 13
await testRunner.GivenAsync("que o aluno de pos-graduacao esta no Portal de inscricoes", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
await testRunner.WhenAsync(string.Format("ele seleciona o tipo de ensino \"{0}\"", nivel), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
await testRunner.AndAsync(string.Format("seleciona o curso \"{0}\"", graduation_Combo), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
await testRunner.AndAsync("ele clica no botão \"Avançar\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
await testRunner.AndAsync("na tela de Dados pessoais ele preenche os campos obrigatorios", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
await testRunner.AndAsync(string.Format("preenche o CPF \"{0}\"", cpf_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
await testRunner.AndAsync(string.Format("preenche o Nome \"{0}\"", name_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
await testRunner.AndAsync(string.Format("preenche o Sobrenome \"{0}\"", surname_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
await testRunner.AndAsync(string.Format("preenche a Data de nascimento \"{0}\"", birthdate_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
await testRunner.AndAsync(string.Format("preenche o Email \"{0}\"", email_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
await testRunner.AndAsync(string.Format("preenche o Celular \"{0}\"", cellphone_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
await testRunner.AndAsync(string.Format("preenche o CEP \"{0}\"", cep_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
await testRunner.AndAsync(string.Format("preenche o Endereco \"{0}\"", address_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
await testRunner.AndAsync(string.Format("preenche o Bairro \"{0}\"", neighborhood_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
await testRunner.AndAsync(string.Format("preenche a Cidade \"{0}\"", city_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
await testRunner.AndAsync(string.Format("preenche o Estado \"{0}\"", state_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
await testRunner.AndAsync(string.Format("preenche o Pais \"{0}\"", country_Input), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
await testRunner.AndAsync("clica no botao \"Avançar\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
await testRunner.ThenAsync("aluno de pos-graduacao cadastrado com sucesso", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CadastroPosFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CadastroPosFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
